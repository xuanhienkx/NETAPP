//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace HOGW_PT_Dealer.SBSCommon {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CommonServiceSoap", Namespace="http://tempuri.org/")]
    public partial class CommonService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CheckAndHoldBalanceWhenModifyHNXOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTradingOrderWhenModifyHNXOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateBankAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateStockOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContigenDayOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentTransactionDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentTradingSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerBalanceInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerDebitLimitOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerTransactionDayOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDayCreditOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMoneyAmountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMoneyDayTOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMoneyTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrdersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStockDayTOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStockEnquiryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStockListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStockPriceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStockTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTradingOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransactionDayOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransactionDayHistOperationCompleted;
        
        private System.Threading.SendOrPostCallback OrderAgentDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportCustomerBuyHoldAmountOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportCustomerSellPendingAmountOperationCompleted;
        
        private System.Threading.SendOrPostCallback TradingResultGetDetailOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CommonService() {
            this.Url = global::HOGW_PT_Dealer.Properties.Settings.Default.SBSCommon_CommonService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CheckAndHoldBalanceWhenModifyHNXOrderCompletedEventHandler CheckAndHoldBalanceWhenModifyHNXOrderCompleted;
        
        /// <remarks/>
        public event UpdateTradingOrderWhenModifyHNXOrderCompletedEventHandler UpdateTradingOrderWhenModifyHNXOrderCompleted;
        
        /// <remarks/>
        public event CreateBankAccountCompletedEventHandler CreateBankAccountCompleted;
        
        /// <remarks/>
        public event CreateCustomerCompletedEventHandler CreateCustomerCompleted;
        
        /// <remarks/>
        public event CreateStockOrderCompletedEventHandler CreateStockOrderCompleted;
        
        /// <remarks/>
        public event GetContigenDayCompletedEventHandler GetContigenDayCompleted;
        
        /// <remarks/>
        public event GetCurrentTransactionDateCompletedEventHandler GetCurrentTransactionDateCompleted;
        
        /// <remarks/>
        public event GetCurrentTradingSessionCompletedEventHandler GetCurrentTradingSessionCompleted;
        
        /// <remarks/>
        public event GetCustomerCompletedEventHandler GetCustomerCompleted;
        
        /// <remarks/>
        public event GetCustomerBalanceInformationCompletedEventHandler GetCustomerBalanceInformationCompleted;
        
        /// <remarks/>
        public event GetCustomerDebitLimitCompletedEventHandler GetCustomerDebitLimitCompleted;
        
        /// <remarks/>
        public event GetCustomerTransactionDayCompletedEventHandler GetCustomerTransactionDayCompleted;
        
        /// <remarks/>
        public event GetDayCreditCompletedEventHandler GetDayCreditCompleted;
        
        /// <remarks/>
        public event GetMoneyAmountCompletedEventHandler GetMoneyAmountCompleted;
        
        /// <remarks/>
        public event GetMoneyDayTCompletedEventHandler GetMoneyDayTCompleted;
        
        /// <remarks/>
        public event GetMoneyTransactionCompletedEventHandler GetMoneyTransactionCompleted;
        
        /// <remarks/>
        public event GetOrdersCompletedEventHandler GetOrdersCompleted;
        
        /// <remarks/>
        public event GetStockDayTCompletedEventHandler GetStockDayTCompleted;
        
        /// <remarks/>
        public event GetStockEnquiryCompletedEventHandler GetStockEnquiryCompleted;
        
        /// <remarks/>
        public event GetStockListCompletedEventHandler GetStockListCompleted;
        
        /// <remarks/>
        public event GetStockPriceCompletedEventHandler GetStockPriceCompleted;
        
        /// <remarks/>
        public event GetStockTransactionCompletedEventHandler GetStockTransactionCompleted;
        
        /// <remarks/>
        public event GetTradingOrderCompletedEventHandler GetTradingOrderCompleted;
        
        /// <remarks/>
        public event GetTransactionDayCompletedEventHandler GetTransactionDayCompleted;
        
        /// <remarks/>
        public event GetTransactionDayHistCompletedEventHandler GetTransactionDayHistCompleted;
        
        /// <remarks/>
        public event OrderAgentDeleteCompletedEventHandler OrderAgentDeleteCompleted;
        
        /// <remarks/>
        public event ReportCustomerBuyHoldAmountCompletedEventHandler ReportCustomerBuyHoldAmountCompleted;
        
        /// <remarks/>
        public event ReportCustomerSellPendingAmountCompletedEventHandler ReportCustomerSellPendingAmountCompleted;
        
        /// <remarks/>
        public event TradingResultGetDetailCompletedEventHandler TradingResultGetDetailCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckAndHoldBalanceWhenModifyHNXOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckAndHoldBalanceWhenModifyHNXOrder(string gatewayUserName, string gatewayPassword, string orderSeq, string price, string volume) {
            object[] results = this.Invoke("CheckAndHoldBalanceWhenModifyHNXOrder", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        orderSeq,
                        price,
                        volume});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckAndHoldBalanceWhenModifyHNXOrderAsync(string gatewayUserName, string gatewayPassword, string orderSeq, string price, string volume) {
            this.CheckAndHoldBalanceWhenModifyHNXOrderAsync(gatewayUserName, gatewayPassword, orderSeq, price, volume, null);
        }
        
        /// <remarks/>
        public void CheckAndHoldBalanceWhenModifyHNXOrderAsync(string gatewayUserName, string gatewayPassword, string orderSeq, string price, string volume, object userState) {
            if ((this.CheckAndHoldBalanceWhenModifyHNXOrderOperationCompleted == null)) {
                this.CheckAndHoldBalanceWhenModifyHNXOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckAndHoldBalanceWhenModifyHNXOrderOperationCompleted);
            }
            this.InvokeAsync("CheckAndHoldBalanceWhenModifyHNXOrder", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        orderSeq,
                        price,
                        volume}, this.CheckAndHoldBalanceWhenModifyHNXOrderOperationCompleted, userState);
        }
        
        private void OnCheckAndHoldBalanceWhenModifyHNXOrderOperationCompleted(object arg) {
            if ((this.CheckAndHoldBalanceWhenModifyHNXOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckAndHoldBalanceWhenModifyHNXOrderCompleted(this, new CheckAndHoldBalanceWhenModifyHNXOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTradingOrderWhenModifyHNXOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateTradingOrderWhenModifyHNXOrder(string gatewayUserName, string gatewayPassword, string buyerOrderSeq, string sellerOrderSeq, string price, string volume) {
            object[] results = this.Invoke("UpdateTradingOrderWhenModifyHNXOrder", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        buyerOrderSeq,
                        sellerOrderSeq,
                        price,
                        volume});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateTradingOrderWhenModifyHNXOrderAsync(string gatewayUserName, string gatewayPassword, string buyerOrderSeq, string sellerOrderSeq, string price, string volume) {
            this.UpdateTradingOrderWhenModifyHNXOrderAsync(gatewayUserName, gatewayPassword, buyerOrderSeq, sellerOrderSeq, price, volume, null);
        }
        
        /// <remarks/>
        public void UpdateTradingOrderWhenModifyHNXOrderAsync(string gatewayUserName, string gatewayPassword, string buyerOrderSeq, string sellerOrderSeq, string price, string volume, object userState) {
            if ((this.UpdateTradingOrderWhenModifyHNXOrderOperationCompleted == null)) {
                this.UpdateTradingOrderWhenModifyHNXOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTradingOrderWhenModifyHNXOrderOperationCompleted);
            }
            this.InvokeAsync("UpdateTradingOrderWhenModifyHNXOrder", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        buyerOrderSeq,
                        sellerOrderSeq,
                        price,
                        volume}, this.UpdateTradingOrderWhenModifyHNXOrderOperationCompleted, userState);
        }
        
        private void OnUpdateTradingOrderWhenModifyHNXOrderOperationCompleted(object arg) {
            if ((this.UpdateTradingOrderWhenModifyHNXOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTradingOrderWhenModifyHNXOrderCompleted(this, new UpdateTradingOrderWhenModifyHNXOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateBankAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateBankAccount(string gatewayUserName, string gatewayPassword, string customerId, string BankCode, string CifPrefix) {
            object[] results = this.Invoke("CreateBankAccount", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerId,
                        BankCode,
                        CifPrefix});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateBankAccountAsync(string gatewayUserName, string gatewayPassword, string customerId, string BankCode, string CifPrefix) {
            this.CreateBankAccountAsync(gatewayUserName, gatewayPassword, customerId, BankCode, CifPrefix, null);
        }
        
        /// <remarks/>
        public void CreateBankAccountAsync(string gatewayUserName, string gatewayPassword, string customerId, string BankCode, string CifPrefix, object userState) {
            if ((this.CreateBankAccountOperationCompleted == null)) {
                this.CreateBankAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateBankAccountOperationCompleted);
            }
            this.InvokeAsync("CreateBankAccount", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerId,
                        BankCode,
                        CifPrefix}, this.CreateBankAccountOperationCompleted, userState);
        }
        
        private void OnCreateBankAccountOperationCompleted(object arg) {
            if ((this.CreateBankAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateBankAccountCompleted(this, new CreateBankAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateCustomer(
                    string gatewayUserName, 
                    string gatewayPassword, 
                    string customerName, 
                    string bornDate, 
                    string Sex, 
                    string cardIdentity, 
                    string cardType, 
                    string cardDate, 
                    string cardIssuer, 
                    string address, 
                    string country, 
                    string tel, 
                    string mobile, 
                    string customerType, 
                    string domesticForeign, 
                    string BrokerId, 
                    string TradeCode) {
            object[] results = this.Invoke("CreateCustomer", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerName,
                        bornDate,
                        Sex,
                        cardIdentity,
                        cardType,
                        cardDate,
                        cardIssuer,
                        address,
                        country,
                        tel,
                        mobile,
                        customerType,
                        domesticForeign,
                        BrokerId,
                        TradeCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateCustomerAsync(
                    string gatewayUserName, 
                    string gatewayPassword, 
                    string customerName, 
                    string bornDate, 
                    string Sex, 
                    string cardIdentity, 
                    string cardType, 
                    string cardDate, 
                    string cardIssuer, 
                    string address, 
                    string country, 
                    string tel, 
                    string mobile, 
                    string customerType, 
                    string domesticForeign, 
                    string BrokerId, 
                    string TradeCode) {
            this.CreateCustomerAsync(gatewayUserName, gatewayPassword, customerName, bornDate, Sex, cardIdentity, cardType, cardDate, cardIssuer, address, country, tel, mobile, customerType, domesticForeign, BrokerId, TradeCode, null);
        }
        
        /// <remarks/>
        public void CreateCustomerAsync(
                    string gatewayUserName, 
                    string gatewayPassword, 
                    string customerName, 
                    string bornDate, 
                    string Sex, 
                    string cardIdentity, 
                    string cardType, 
                    string cardDate, 
                    string cardIssuer, 
                    string address, 
                    string country, 
                    string tel, 
                    string mobile, 
                    string customerType, 
                    string domesticForeign, 
                    string BrokerId, 
                    string TradeCode, 
                    object userState) {
            if ((this.CreateCustomerOperationCompleted == null)) {
                this.CreateCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateCustomerOperationCompleted);
            }
            this.InvokeAsync("CreateCustomer", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerName,
                        bornDate,
                        Sex,
                        cardIdentity,
                        cardType,
                        cardDate,
                        cardIssuer,
                        address,
                        country,
                        tel,
                        mobile,
                        customerType,
                        domesticForeign,
                        BrokerId,
                        TradeCode}, this.CreateCustomerOperationCompleted, userState);
        }
        
        private void OnCreateCustomerOperationCompleted(object arg) {
            if ((this.CreateCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateCustomerCompleted(this, new CreateCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateStockOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateStockOrder(
                    string gatewayUserName, 
                    string gatewayPassword, 
                    string orderDate, 
                    string orderSide, 
                    string orderType, 
                    string stockCode, 
                    string orderVolume, 
                    string orderPrice, 
                    string stopPrice, 
                    string icebergVolume, 
                    string customerID, 
                    string branchCode, 
                    string tradeCode, 
                    string receivedBy, 
                    string approveBy, 
                    string notes) {
            object[] results = this.Invoke("CreateStockOrder", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        orderDate,
                        orderSide,
                        orderType,
                        stockCode,
                        orderVolume,
                        orderPrice,
                        stopPrice,
                        icebergVolume,
                        customerID,
                        branchCode,
                        tradeCode,
                        receivedBy,
                        approveBy,
                        notes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateStockOrderAsync(
                    string gatewayUserName, 
                    string gatewayPassword, 
                    string orderDate, 
                    string orderSide, 
                    string orderType, 
                    string stockCode, 
                    string orderVolume, 
                    string orderPrice, 
                    string stopPrice, 
                    string icebergVolume, 
                    string customerID, 
                    string branchCode, 
                    string tradeCode, 
                    string receivedBy, 
                    string approveBy, 
                    string notes) {
            this.CreateStockOrderAsync(gatewayUserName, gatewayPassword, orderDate, orderSide, orderType, stockCode, orderVolume, orderPrice, stopPrice, icebergVolume, customerID, branchCode, tradeCode, receivedBy, approveBy, notes, null);
        }
        
        /// <remarks/>
        public void CreateStockOrderAsync(
                    string gatewayUserName, 
                    string gatewayPassword, 
                    string orderDate, 
                    string orderSide, 
                    string orderType, 
                    string stockCode, 
                    string orderVolume, 
                    string orderPrice, 
                    string stopPrice, 
                    string icebergVolume, 
                    string customerID, 
                    string branchCode, 
                    string tradeCode, 
                    string receivedBy, 
                    string approveBy, 
                    string notes, 
                    object userState) {
            if ((this.CreateStockOrderOperationCompleted == null)) {
                this.CreateStockOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateStockOrderOperationCompleted);
            }
            this.InvokeAsync("CreateStockOrder", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        orderDate,
                        orderSide,
                        orderType,
                        stockCode,
                        orderVolume,
                        orderPrice,
                        stopPrice,
                        icebergVolume,
                        customerID,
                        branchCode,
                        tradeCode,
                        receivedBy,
                        approveBy,
                        notes}, this.CreateStockOrderOperationCompleted, userState);
        }
        
        private void OnCreateStockOrderOperationCompleted(object arg) {
            if ((this.CreateStockOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateStockOrderCompleted(this, new CreateStockOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetContigenDay", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetContigenDay(string gatewayUserName, string gatewayPassword, string customerID, string fromDate, string toDate) {
            object[] results = this.Invoke("GetContigenDay", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        fromDate,
                        toDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetContigenDayAsync(string gatewayUserName, string gatewayPassword, string customerID, string fromDate, string toDate) {
            this.GetContigenDayAsync(gatewayUserName, gatewayPassword, customerID, fromDate, toDate, null);
        }
        
        /// <remarks/>
        public void GetContigenDayAsync(string gatewayUserName, string gatewayPassword, string customerID, string fromDate, string toDate, object userState) {
            if ((this.GetContigenDayOperationCompleted == null)) {
                this.GetContigenDayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContigenDayOperationCompleted);
            }
            this.InvokeAsync("GetContigenDay", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        fromDate,
                        toDate}, this.GetContigenDayOperationCompleted, userState);
        }
        
        private void OnGetContigenDayOperationCompleted(object arg) {
            if ((this.GetContigenDayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContigenDayCompleted(this, new GetContigenDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCurrentTransactionDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCurrentTransactionDate(string gatewayUserName, string gatewayPassword, string branchCode) {
            object[] results = this.Invoke("GetCurrentTransactionDate", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        branchCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentTransactionDateAsync(string gatewayUserName, string gatewayPassword, string branchCode) {
            this.GetCurrentTransactionDateAsync(gatewayUserName, gatewayPassword, branchCode, null);
        }
        
        /// <remarks/>
        public void GetCurrentTransactionDateAsync(string gatewayUserName, string gatewayPassword, string branchCode, object userState) {
            if ((this.GetCurrentTransactionDateOperationCompleted == null)) {
                this.GetCurrentTransactionDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentTransactionDateOperationCompleted);
            }
            this.InvokeAsync("GetCurrentTransactionDate", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        branchCode}, this.GetCurrentTransactionDateOperationCompleted, userState);
        }
        
        private void OnGetCurrentTransactionDateOperationCompleted(object arg) {
            if ((this.GetCurrentTransactionDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentTransactionDateCompleted(this, new GetCurrentTransactionDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCurrentTradingSession", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCurrentTradingSession(string gatewayUserName, string gatewayPassword, string stockCode, string boardType) {
            object[] results = this.Invoke("GetCurrentTradingSession", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        stockCode,
                        boardType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentTradingSessionAsync(string gatewayUserName, string gatewayPassword, string stockCode, string boardType) {
            this.GetCurrentTradingSessionAsync(gatewayUserName, gatewayPassword, stockCode, boardType, null);
        }
        
        /// <remarks/>
        public void GetCurrentTradingSessionAsync(string gatewayUserName, string gatewayPassword, string stockCode, string boardType, object userState) {
            if ((this.GetCurrentTradingSessionOperationCompleted == null)) {
                this.GetCurrentTradingSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentTradingSessionOperationCompleted);
            }
            this.InvokeAsync("GetCurrentTradingSession", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        stockCode,
                        boardType}, this.GetCurrentTradingSessionOperationCompleted, userState);
        }
        
        private void OnGetCurrentTradingSessionOperationCompleted(object arg) {
            if ((this.GetCurrentTradingSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentTradingSessionCompleted(this, new GetCurrentTradingSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomer(string gatewayUserName, string gatewayPassword, string customerID) {
            object[] results = this.Invoke("GetCustomer", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerAsync(string gatewayUserName, string gatewayPassword, string customerID) {
            this.GetCustomerAsync(gatewayUserName, gatewayPassword, customerID, null);
        }
        
        /// <remarks/>
        public void GetCustomerAsync(string gatewayUserName, string gatewayPassword, string customerID, object userState) {
            if ((this.GetCustomerOperationCompleted == null)) {
                this.GetCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerOperationCompleted);
            }
            this.InvokeAsync("GetCustomer", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID}, this.GetCustomerOperationCompleted, userState);
        }
        
        private void OnGetCustomerOperationCompleted(object arg) {
            if ((this.GetCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerCompleted(this, new GetCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerBalanceInformation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerBalanceInformation(string gatewayUserName, string gatewayPassword, string customerId) {
            object[] results = this.Invoke("GetCustomerBalanceInformation", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerBalanceInformationAsync(string gatewayUserName, string gatewayPassword, string customerId) {
            this.GetCustomerBalanceInformationAsync(gatewayUserName, gatewayPassword, customerId, null);
        }
        
        /// <remarks/>
        public void GetCustomerBalanceInformationAsync(string gatewayUserName, string gatewayPassword, string customerId, object userState) {
            if ((this.GetCustomerBalanceInformationOperationCompleted == null)) {
                this.GetCustomerBalanceInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerBalanceInformationOperationCompleted);
            }
            this.InvokeAsync("GetCustomerBalanceInformation", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerId}, this.GetCustomerBalanceInformationOperationCompleted, userState);
        }
        
        private void OnGetCustomerBalanceInformationOperationCompleted(object arg) {
            if ((this.GetCustomerBalanceInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerBalanceInformationCompleted(this, new GetCustomerBalanceInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerDebitLimit", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerDebitLimit(string gatewayUserName, string gatewayPassword, string customerID) {
            object[] results = this.Invoke("GetCustomerDebitLimit", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerDebitLimitAsync(string gatewayUserName, string gatewayPassword, string customerID) {
            this.GetCustomerDebitLimitAsync(gatewayUserName, gatewayPassword, customerID, null);
        }
        
        /// <remarks/>
        public void GetCustomerDebitLimitAsync(string gatewayUserName, string gatewayPassword, string customerID, object userState) {
            if ((this.GetCustomerDebitLimitOperationCompleted == null)) {
                this.GetCustomerDebitLimitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerDebitLimitOperationCompleted);
            }
            this.InvokeAsync("GetCustomerDebitLimit", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID}, this.GetCustomerDebitLimitOperationCompleted, userState);
        }
        
        private void OnGetCustomerDebitLimitOperationCompleted(object arg) {
            if ((this.GetCustomerDebitLimitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerDebitLimitCompleted(this, new GetCustomerDebitLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerTransactionDay", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerTransactionDay(string gatewayUserName, string gatewayPassword, string customerId, string fromDate, string toDate) {
            object[] results = this.Invoke("GetCustomerTransactionDay", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerId,
                        fromDate,
                        toDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerTransactionDayAsync(string gatewayUserName, string gatewayPassword, string customerId, string fromDate, string toDate) {
            this.GetCustomerTransactionDayAsync(gatewayUserName, gatewayPassword, customerId, fromDate, toDate, null);
        }
        
        /// <remarks/>
        public void GetCustomerTransactionDayAsync(string gatewayUserName, string gatewayPassword, string customerId, string fromDate, string toDate, object userState) {
            if ((this.GetCustomerTransactionDayOperationCompleted == null)) {
                this.GetCustomerTransactionDayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerTransactionDayOperationCompleted);
            }
            this.InvokeAsync("GetCustomerTransactionDay", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerId,
                        fromDate,
                        toDate}, this.GetCustomerTransactionDayOperationCompleted, userState);
        }
        
        private void OnGetCustomerTransactionDayOperationCompleted(object arg) {
            if ((this.GetCustomerTransactionDayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerTransactionDayCompleted(this, new GetCustomerTransactionDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDayCredit", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDayCredit(string gatewayUserName, string gatewayPassword, string customerID, string stockCode, string transactionDate) {
            object[] results = this.Invoke("GetDayCredit", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        stockCode,
                        transactionDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDayCreditAsync(string gatewayUserName, string gatewayPassword, string customerID, string stockCode, string transactionDate) {
            this.GetDayCreditAsync(gatewayUserName, gatewayPassword, customerID, stockCode, transactionDate, null);
        }
        
        /// <remarks/>
        public void GetDayCreditAsync(string gatewayUserName, string gatewayPassword, string customerID, string stockCode, string transactionDate, object userState) {
            if ((this.GetDayCreditOperationCompleted == null)) {
                this.GetDayCreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDayCreditOperationCompleted);
            }
            this.InvokeAsync("GetDayCredit", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        stockCode,
                        transactionDate}, this.GetDayCreditOperationCompleted, userState);
        }
        
        private void OnGetDayCreditOperationCompleted(object arg) {
            if ((this.GetDayCreditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDayCreditCompleted(this, new GetDayCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMoneyAmount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMoneyAmount(string gatewayUserName, string gatewayPassword, string customerID) {
            object[] results = this.Invoke("GetMoneyAmount", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMoneyAmountAsync(string gatewayUserName, string gatewayPassword, string customerID) {
            this.GetMoneyAmountAsync(gatewayUserName, gatewayPassword, customerID, null);
        }
        
        /// <remarks/>
        public void GetMoneyAmountAsync(string gatewayUserName, string gatewayPassword, string customerID, object userState) {
            if ((this.GetMoneyAmountOperationCompleted == null)) {
                this.GetMoneyAmountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMoneyAmountOperationCompleted);
            }
            this.InvokeAsync("GetMoneyAmount", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID}, this.GetMoneyAmountOperationCompleted, userState);
        }
        
        private void OnGetMoneyAmountOperationCompleted(object arg) {
            if ((this.GetMoneyAmountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMoneyAmountCompleted(this, new GetMoneyAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMoneyDayT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMoneyDayT(string gatewayUserName, string gatewayPassword, string customerID, string T) {
            object[] results = this.Invoke("GetMoneyDayT", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        T});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMoneyDayTAsync(string gatewayUserName, string gatewayPassword, string customerID, string T) {
            this.GetMoneyDayTAsync(gatewayUserName, gatewayPassword, customerID, T, null);
        }
        
        /// <remarks/>
        public void GetMoneyDayTAsync(string gatewayUserName, string gatewayPassword, string customerID, string T, object userState) {
            if ((this.GetMoneyDayTOperationCompleted == null)) {
                this.GetMoneyDayTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMoneyDayTOperationCompleted);
            }
            this.InvokeAsync("GetMoneyDayT", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        T}, this.GetMoneyDayTOperationCompleted, userState);
        }
        
        private void OnGetMoneyDayTOperationCompleted(object arg) {
            if ((this.GetMoneyDayTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMoneyDayTCompleted(this, new GetMoneyDayTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMoneyTransaction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMoneyTransaction(string gatewayUserName, string gatewayPassword, string customerID, string fromDate, string toDate) {
            object[] results = this.Invoke("GetMoneyTransaction", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        fromDate,
                        toDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMoneyTransactionAsync(string gatewayUserName, string gatewayPassword, string customerID, string fromDate, string toDate) {
            this.GetMoneyTransactionAsync(gatewayUserName, gatewayPassword, customerID, fromDate, toDate, null);
        }
        
        /// <remarks/>
        public void GetMoneyTransactionAsync(string gatewayUserName, string gatewayPassword, string customerID, string fromDate, string toDate, object userState) {
            if ((this.GetMoneyTransactionOperationCompleted == null)) {
                this.GetMoneyTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMoneyTransactionOperationCompleted);
            }
            this.InvokeAsync("GetMoneyTransaction", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        fromDate,
                        toDate}, this.GetMoneyTransactionOperationCompleted, userState);
        }
        
        private void OnGetMoneyTransactionOperationCompleted(object arg) {
            if ((this.GetMoneyTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMoneyTransactionCompleted(this, new GetMoneyTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOrders", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOrders(string gatewayUserName, string gatewayPassword, string fromDate, string toDate, string customerID, string orderStatus, string receivedBy) {
            object[] results = this.Invoke("GetOrders", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        fromDate,
                        toDate,
                        customerID,
                        orderStatus,
                        receivedBy});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrdersAsync(string gatewayUserName, string gatewayPassword, string fromDate, string toDate, string customerID, string orderStatus, string receivedBy) {
            this.GetOrdersAsync(gatewayUserName, gatewayPassword, fromDate, toDate, customerID, orderStatus, receivedBy, null);
        }
        
        /// <remarks/>
        public void GetOrdersAsync(string gatewayUserName, string gatewayPassword, string fromDate, string toDate, string customerID, string orderStatus, string receivedBy, object userState) {
            if ((this.GetOrdersOperationCompleted == null)) {
                this.GetOrdersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrdersOperationCompleted);
            }
            this.InvokeAsync("GetOrders", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        fromDate,
                        toDate,
                        customerID,
                        orderStatus,
                        receivedBy}, this.GetOrdersOperationCompleted, userState);
        }
        
        private void OnGetOrdersOperationCompleted(object arg) {
            if ((this.GetOrdersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrdersCompleted(this, new GetOrdersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStockDayT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStockDayT(string gatewayUserName, string gatewayPassword, string customerID, string T) {
            object[] results = this.Invoke("GetStockDayT", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        T});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStockDayTAsync(string gatewayUserName, string gatewayPassword, string customerID, string T) {
            this.GetStockDayTAsync(gatewayUserName, gatewayPassword, customerID, T, null);
        }
        
        /// <remarks/>
        public void GetStockDayTAsync(string gatewayUserName, string gatewayPassword, string customerID, string T, object userState) {
            if ((this.GetStockDayTOperationCompleted == null)) {
                this.GetStockDayTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStockDayTOperationCompleted);
            }
            this.InvokeAsync("GetStockDayT", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        T}, this.GetStockDayTOperationCompleted, userState);
        }
        
        private void OnGetStockDayTOperationCompleted(object arg) {
            if ((this.GetStockDayTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStockDayTCompleted(this, new GetStockDayTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStockEnquiry", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStockEnquiry(string gatewayUserName, string gatewayPassword, string customerID, string transactionDate) {
            object[] results = this.Invoke("GetStockEnquiry", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        transactionDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStockEnquiryAsync(string gatewayUserName, string gatewayPassword, string customerID, string transactionDate) {
            this.GetStockEnquiryAsync(gatewayUserName, gatewayPassword, customerID, transactionDate, null);
        }
        
        /// <remarks/>
        public void GetStockEnquiryAsync(string gatewayUserName, string gatewayPassword, string customerID, string transactionDate, object userState) {
            if ((this.GetStockEnquiryOperationCompleted == null)) {
                this.GetStockEnquiryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStockEnquiryOperationCompleted);
            }
            this.InvokeAsync("GetStockEnquiry", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        transactionDate}, this.GetStockEnquiryOperationCompleted, userState);
        }
        
        private void OnGetStockEnquiryOperationCompleted(object arg) {
            if ((this.GetStockEnquiryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStockEnquiryCompleted(this, new GetStockEnquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStockList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StockData[] GetStockList(string gatewayUserName, string gatewayPassword) {
            object[] results = this.Invoke("GetStockList", new object[] {
                        gatewayUserName,
                        gatewayPassword});
            return ((StockData[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStockListAsync(string gatewayUserName, string gatewayPassword) {
            this.GetStockListAsync(gatewayUserName, gatewayPassword, null);
        }
        
        /// <remarks/>
        public void GetStockListAsync(string gatewayUserName, string gatewayPassword, object userState) {
            if ((this.GetStockListOperationCompleted == null)) {
                this.GetStockListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStockListOperationCompleted);
            }
            this.InvokeAsync("GetStockList", new object[] {
                        gatewayUserName,
                        gatewayPassword}, this.GetStockListOperationCompleted, userState);
        }
        
        private void OnGetStockListOperationCompleted(object arg) {
            if ((this.GetStockListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStockListCompleted(this, new GetStockListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStockPrice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StockPrice GetStockPrice(string gatewayUserName, string gatewayPassword, string transactionDate, string stockCode) {
            object[] results = this.Invoke("GetStockPrice", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        transactionDate,
                        stockCode});
            return ((StockPrice)(results[0]));
        }
        
        /// <remarks/>
        public void GetStockPriceAsync(string gatewayUserName, string gatewayPassword, string transactionDate, string stockCode) {
            this.GetStockPriceAsync(gatewayUserName, gatewayPassword, transactionDate, stockCode, null);
        }
        
        /// <remarks/>
        public void GetStockPriceAsync(string gatewayUserName, string gatewayPassword, string transactionDate, string stockCode, object userState) {
            if ((this.GetStockPriceOperationCompleted == null)) {
                this.GetStockPriceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStockPriceOperationCompleted);
            }
            this.InvokeAsync("GetStockPrice", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        transactionDate,
                        stockCode}, this.GetStockPriceOperationCompleted, userState);
        }
        
        private void OnGetStockPriceOperationCompleted(object arg) {
            if ((this.GetStockPriceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStockPriceCompleted(this, new GetStockPriceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStockTransaction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStockTransaction(string gatewayUserName, string gatewayPassword, string customerID, string fromDate, string toDate) {
            object[] results = this.Invoke("GetStockTransaction", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        fromDate,
                        toDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStockTransactionAsync(string gatewayUserName, string gatewayPassword, string customerID, string fromDate, string toDate) {
            this.GetStockTransactionAsync(gatewayUserName, gatewayPassword, customerID, fromDate, toDate, null);
        }
        
        /// <remarks/>
        public void GetStockTransactionAsync(string gatewayUserName, string gatewayPassword, string customerID, string fromDate, string toDate, object userState) {
            if ((this.GetStockTransactionOperationCompleted == null)) {
                this.GetStockTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStockTransactionOperationCompleted);
            }
            this.InvokeAsync("GetStockTransaction", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        fromDate,
                        toDate}, this.GetStockTransactionOperationCompleted, userState);
        }
        
        private void OnGetStockTransactionOperationCompleted(object arg) {
            if ((this.GetStockTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStockTransactionCompleted(this, new GetStockTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTradingOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTradingOrder(string gatewayUserName, string gatewayPassword, string customerID, string fromDate, string toDate) {
            object[] results = this.Invoke("GetTradingOrder", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        fromDate,
                        toDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTradingOrderAsync(string gatewayUserName, string gatewayPassword, string customerID, string fromDate, string toDate) {
            this.GetTradingOrderAsync(gatewayUserName, gatewayPassword, customerID, fromDate, toDate, null);
        }
        
        /// <remarks/>
        public void GetTradingOrderAsync(string gatewayUserName, string gatewayPassword, string customerID, string fromDate, string toDate, object userState) {
            if ((this.GetTradingOrderOperationCompleted == null)) {
                this.GetTradingOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTradingOrderOperationCompleted);
            }
            this.InvokeAsync("GetTradingOrder", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        fromDate,
                        toDate}, this.GetTradingOrderOperationCompleted, userState);
        }
        
        private void OnGetTradingOrderOperationCompleted(object arg) {
            if ((this.GetTradingOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTradingOrderCompleted(this, new GetTradingOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTransactionDay", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTransactionDay(string gatewayUserName, string gatewayPassword, string customerID, string fromDate, string toDate) {
            object[] results = this.Invoke("GetTransactionDay", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        fromDate,
                        toDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionDayAsync(string gatewayUserName, string gatewayPassword, string customerID, string fromDate, string toDate) {
            this.GetTransactionDayAsync(gatewayUserName, gatewayPassword, customerID, fromDate, toDate, null);
        }
        
        /// <remarks/>
        public void GetTransactionDayAsync(string gatewayUserName, string gatewayPassword, string customerID, string fromDate, string toDate, object userState) {
            if ((this.GetTransactionDayOperationCompleted == null)) {
                this.GetTransactionDayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionDayOperationCompleted);
            }
            this.InvokeAsync("GetTransactionDay", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        fromDate,
                        toDate}, this.GetTransactionDayOperationCompleted, userState);
        }
        
        private void OnGetTransactionDayOperationCompleted(object arg) {
            if ((this.GetTransactionDayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionDayCompleted(this, new GetTransactionDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTransactionDayHist", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CustomerTransactionDay[] GetTransactionDayHist(string gatewayUserName, string gatewayPassword, string customerID, string fromDate, string toDate) {
            object[] results = this.Invoke("GetTransactionDayHist", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        fromDate,
                        toDate});
            return ((CustomerTransactionDay[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionDayHistAsync(string gatewayUserName, string gatewayPassword, string customerID, string fromDate, string toDate) {
            this.GetTransactionDayHistAsync(gatewayUserName, gatewayPassword, customerID, fromDate, toDate, null);
        }
        
        /// <remarks/>
        public void GetTransactionDayHistAsync(string gatewayUserName, string gatewayPassword, string customerID, string fromDate, string toDate, object userState) {
            if ((this.GetTransactionDayHistOperationCompleted == null)) {
                this.GetTransactionDayHistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionDayHistOperationCompleted);
            }
            this.InvokeAsync("GetTransactionDayHist", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        fromDate,
                        toDate}, this.GetTransactionDayHistOperationCompleted, userState);
        }
        
        private void OnGetTransactionDayHistOperationCompleted(object arg) {
            if ((this.GetTransactionDayHistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionDayHistCompleted(this, new GetTransactionDayHistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/OrderAgentDelete", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OrderAgentDelete(string gatewayUserName, string gatewayPassword, string orderDate, string orderSeq) {
            object[] results = this.Invoke("OrderAgentDelete", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        orderDate,
                        orderSeq});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OrderAgentDeleteAsync(string gatewayUserName, string gatewayPassword, string orderDate, string orderSeq) {
            this.OrderAgentDeleteAsync(gatewayUserName, gatewayPassword, orderDate, orderSeq, null);
        }
        
        /// <remarks/>
        public void OrderAgentDeleteAsync(string gatewayUserName, string gatewayPassword, string orderDate, string orderSeq, object userState) {
            if ((this.OrderAgentDeleteOperationCompleted == null)) {
                this.OrderAgentDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOrderAgentDeleteOperationCompleted);
            }
            this.InvokeAsync("OrderAgentDelete", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        orderDate,
                        orderSeq}, this.OrderAgentDeleteOperationCompleted, userState);
        }
        
        private void OnOrderAgentDeleteOperationCompleted(object arg) {
            if ((this.OrderAgentDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OrderAgentDeleteCompleted(this, new OrderAgentDeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReportCustomerBuyHoldAmount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReportCustomerBuyHoldAmount(string gatewayUserName, string gatewayPassword, string customerID, string boardType) {
            object[] results = this.Invoke("ReportCustomerBuyHoldAmount", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        boardType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReportCustomerBuyHoldAmountAsync(string gatewayUserName, string gatewayPassword, string customerID, string boardType) {
            this.ReportCustomerBuyHoldAmountAsync(gatewayUserName, gatewayPassword, customerID, boardType, null);
        }
        
        /// <remarks/>
        public void ReportCustomerBuyHoldAmountAsync(string gatewayUserName, string gatewayPassword, string customerID, string boardType, object userState) {
            if ((this.ReportCustomerBuyHoldAmountOperationCompleted == null)) {
                this.ReportCustomerBuyHoldAmountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportCustomerBuyHoldAmountOperationCompleted);
            }
            this.InvokeAsync("ReportCustomerBuyHoldAmount", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        boardType}, this.ReportCustomerBuyHoldAmountOperationCompleted, userState);
        }
        
        private void OnReportCustomerBuyHoldAmountOperationCompleted(object arg) {
            if ((this.ReportCustomerBuyHoldAmountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportCustomerBuyHoldAmountCompleted(this, new ReportCustomerBuyHoldAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReportCustomerSellPendingAmount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReportCustomerSellPendingAmount(string gatewayUserName, string gatewayPassword, string customerID, string boardType) {
            object[] results = this.Invoke("ReportCustomerSellPendingAmount", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        boardType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReportCustomerSellPendingAmountAsync(string gatewayUserName, string gatewayPassword, string customerID, string boardType) {
            this.ReportCustomerSellPendingAmountAsync(gatewayUserName, gatewayPassword, customerID, boardType, null);
        }
        
        /// <remarks/>
        public void ReportCustomerSellPendingAmountAsync(string gatewayUserName, string gatewayPassword, string customerID, string boardType, object userState) {
            if ((this.ReportCustomerSellPendingAmountOperationCompleted == null)) {
                this.ReportCustomerSellPendingAmountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportCustomerSellPendingAmountOperationCompleted);
            }
            this.InvokeAsync("ReportCustomerSellPendingAmount", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerID,
                        boardType}, this.ReportCustomerSellPendingAmountOperationCompleted, userState);
        }
        
        private void OnReportCustomerSellPendingAmountOperationCompleted(object arg) {
            if ((this.ReportCustomerSellPendingAmountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportCustomerSellPendingAmountCompleted(this, new ReportCustomerSellPendingAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TradingResultGetDetail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TradingResultGetDetail(string gatewayUserName, string gatewayPassword, string customerId) {
            object[] results = this.Invoke("TradingResultGetDetail", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TradingResultGetDetailAsync(string gatewayUserName, string gatewayPassword, string customerId) {
            this.TradingResultGetDetailAsync(gatewayUserName, gatewayPassword, customerId, null);
        }
        
        /// <remarks/>
        public void TradingResultGetDetailAsync(string gatewayUserName, string gatewayPassword, string customerId, object userState) {
            if ((this.TradingResultGetDetailOperationCompleted == null)) {
                this.TradingResultGetDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTradingResultGetDetailOperationCompleted);
            }
            this.InvokeAsync("TradingResultGetDetail", new object[] {
                        gatewayUserName,
                        gatewayPassword,
                        customerId}, this.TradingResultGetDetailOperationCompleted, userState);
        }
        
        private void OnTradingResultGetDetailOperationCompleted(object arg) {
            if ((this.TradingResultGetDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TradingResultGetDetailCompleted(this, new TradingResultGetDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class StockData {
        
        private string boardTypeField;
        
        private int idField;
        
        private decimal parValueField;
        
        private string shortNameField;
        
        private string stockCodeField;
        
        private string stockNameField;
        
        private string stockNameVietField;
        
        private string stockTypeField;
        
        /// <remarks/>
        public string BoardType {
            get {
                return this.boardTypeField;
            }
            set {
                this.boardTypeField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public decimal ParValue {
            get {
                return this.parValueField;
            }
            set {
                this.parValueField = value;
            }
        }
        
        /// <remarks/>
        public string ShortName {
            get {
                return this.shortNameField;
            }
            set {
                this.shortNameField = value;
            }
        }
        
        /// <remarks/>
        public string StockCode {
            get {
                return this.stockCodeField;
            }
            set {
                this.stockCodeField = value;
            }
        }
        
        /// <remarks/>
        public string StockName {
            get {
                return this.stockNameField;
            }
            set {
                this.stockNameField = value;
            }
        }
        
        /// <remarks/>
        public string StockNameViet {
            get {
                return this.stockNameVietField;
            }
            set {
                this.stockNameVietField = value;
            }
        }
        
        /// <remarks/>
        public string StockType {
            get {
                return this.stockTypeField;
            }
            set {
                this.stockTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CustomerTransactionDay {
        
        private decimal dayBalanceField;
        
        private decimal dayAvailBalanceField;
        
        private decimal amountField;
        
        private string bankCodeField;
        
        private string branchCodeField;
        
        private string cIFField;
        
        private string customerBranchCodeField;
        
        private string customerIDField;
        
        private string customerNameField;
        
        private string descriptionField;
        
        private string entryCodeField;
        
        private bool isGenerateEntryField;
        
        private string statusField;
        
        private string taskCodeField;
        
        private string transCodeField;
        
        private System.DateTime transDateField;
        
        private int transSeqField;
        
        private string userApproveField;
        
        private string userEnterField;
        
        private bool withApprovedField;
        
        /// <remarks/>
        public decimal DayBalance {
            get {
                return this.dayBalanceField;
            }
            set {
                this.dayBalanceField = value;
            }
        }
        
        /// <remarks/>
        public decimal DayAvailBalance {
            get {
                return this.dayAvailBalanceField;
            }
            set {
                this.dayAvailBalanceField = value;
            }
        }
        
        /// <remarks/>
        public decimal Amount {
            get {
                return this.amountField;
            }
            set {
                this.amountField = value;
            }
        }
        
        /// <remarks/>
        public string BankCode {
            get {
                return this.bankCodeField;
            }
            set {
                this.bankCodeField = value;
            }
        }
        
        /// <remarks/>
        public string BranchCode {
            get {
                return this.branchCodeField;
            }
            set {
                this.branchCodeField = value;
            }
        }
        
        /// <remarks/>
        public string CIF {
            get {
                return this.cIFField;
            }
            set {
                this.cIFField = value;
            }
        }
        
        /// <remarks/>
        public string CustomerBranchCode {
            get {
                return this.customerBranchCodeField;
            }
            set {
                this.customerBranchCodeField = value;
            }
        }
        
        /// <remarks/>
        public string CustomerID {
            get {
                return this.customerIDField;
            }
            set {
                this.customerIDField = value;
            }
        }
        
        /// <remarks/>
        public string CustomerName {
            get {
                return this.customerNameField;
            }
            set {
                this.customerNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string EntryCode {
            get {
                return this.entryCodeField;
            }
            set {
                this.entryCodeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsGenerateEntry {
            get {
                return this.isGenerateEntryField;
            }
            set {
                this.isGenerateEntryField = value;
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string TaskCode {
            get {
                return this.taskCodeField;
            }
            set {
                this.taskCodeField = value;
            }
        }
        
        /// <remarks/>
        public string TransCode {
            get {
                return this.transCodeField;
            }
            set {
                this.transCodeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime TransDate {
            get {
                return this.transDateField;
            }
            set {
                this.transDateField = value;
            }
        }
        
        /// <remarks/>
        public int TransSeq {
            get {
                return this.transSeqField;
            }
            set {
                this.transSeqField = value;
            }
        }
        
        /// <remarks/>
        public string UserApprove {
            get {
                return this.userApproveField;
            }
            set {
                this.userApproveField = value;
            }
        }
        
        /// <remarks/>
        public string UserEnter {
            get {
                return this.userEnterField;
            }
            set {
                this.userEnterField = value;
            }
        }
        
        /// <remarks/>
        public bool WithApproved {
            get {
                return this.withApprovedField;
            }
            set {
                this.withApprovedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class StockPrice {
        
        private decimal basicPriceField;
        
        private int boardLotField;
        
        private string boardNameField;
        
        private string boardTypeField;
        
        private decimal ceilingPriceField;
        
        private decimal floorPriceField;
        
        private string stockCodeField;
        
        private string stockNameField;
        
        private string stockTypeField;
        
        private string tradingDateField;
        
        /// <remarks/>
        public decimal BasicPrice {
            get {
                return this.basicPriceField;
            }
            set {
                this.basicPriceField = value;
            }
        }
        
        /// <remarks/>
        public int BoardLot {
            get {
                return this.boardLotField;
            }
            set {
                this.boardLotField = value;
            }
        }
        
        /// <remarks/>
        public string BoardName {
            get {
                return this.boardNameField;
            }
            set {
                this.boardNameField = value;
            }
        }
        
        /// <remarks/>
        public string BoardType {
            get {
                return this.boardTypeField;
            }
            set {
                this.boardTypeField = value;
            }
        }
        
        /// <remarks/>
        public decimal CeilingPrice {
            get {
                return this.ceilingPriceField;
            }
            set {
                this.ceilingPriceField = value;
            }
        }
        
        /// <remarks/>
        public decimal FloorPrice {
            get {
                return this.floorPriceField;
            }
            set {
                this.floorPriceField = value;
            }
        }
        
        /// <remarks/>
        public string StockCode {
            get {
                return this.stockCodeField;
            }
            set {
                this.stockCodeField = value;
            }
        }
        
        /// <remarks/>
        public string StockName {
            get {
                return this.stockNameField;
            }
            set {
                this.stockNameField = value;
            }
        }
        
        /// <remarks/>
        public string StockType {
            get {
                return this.stockTypeField;
            }
            set {
                this.stockTypeField = value;
            }
        }
        
        /// <remarks/>
        public string TradingDate {
            get {
                return this.tradingDateField;
            }
            set {
                this.tradingDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void CheckAndHoldBalanceWhenModifyHNXOrderCompletedEventHandler(object sender, CheckAndHoldBalanceWhenModifyHNXOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckAndHoldBalanceWhenModifyHNXOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckAndHoldBalanceWhenModifyHNXOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void UpdateTradingOrderWhenModifyHNXOrderCompletedEventHandler(object sender, UpdateTradingOrderWhenModifyHNXOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateTradingOrderWhenModifyHNXOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateTradingOrderWhenModifyHNXOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void CreateBankAccountCompletedEventHandler(object sender, CreateBankAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateBankAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateBankAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void CreateCustomerCompletedEventHandler(object sender, CreateCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void CreateStockOrderCompletedEventHandler(object sender, CreateStockOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateStockOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateStockOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetContigenDayCompletedEventHandler(object sender, GetContigenDayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContigenDayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContigenDayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetCurrentTransactionDateCompletedEventHandler(object sender, GetCurrentTransactionDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentTransactionDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentTransactionDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetCurrentTradingSessionCompletedEventHandler(object sender, GetCurrentTradingSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentTradingSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentTradingSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetCustomerCompletedEventHandler(object sender, GetCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetCustomerBalanceInformationCompletedEventHandler(object sender, GetCustomerBalanceInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerBalanceInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerBalanceInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetCustomerDebitLimitCompletedEventHandler(object sender, GetCustomerDebitLimitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerDebitLimitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerDebitLimitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetCustomerTransactionDayCompletedEventHandler(object sender, GetCustomerTransactionDayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerTransactionDayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerTransactionDayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetDayCreditCompletedEventHandler(object sender, GetDayCreditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDayCreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDayCreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetMoneyAmountCompletedEventHandler(object sender, GetMoneyAmountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMoneyAmountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMoneyAmountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetMoneyDayTCompletedEventHandler(object sender, GetMoneyDayTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMoneyDayTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMoneyDayTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetMoneyTransactionCompletedEventHandler(object sender, GetMoneyTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMoneyTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMoneyTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetOrdersCompletedEventHandler(object sender, GetOrdersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrdersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrdersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetStockDayTCompletedEventHandler(object sender, GetStockDayTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStockDayTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStockDayTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetStockEnquiryCompletedEventHandler(object sender, GetStockEnquiryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStockEnquiryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStockEnquiryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetStockListCompletedEventHandler(object sender, GetStockListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStockListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStockListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StockData[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StockData[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetStockPriceCompletedEventHandler(object sender, GetStockPriceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStockPriceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStockPriceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StockPrice Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StockPrice)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetStockTransactionCompletedEventHandler(object sender, GetStockTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStockTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStockTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetTradingOrderCompletedEventHandler(object sender, GetTradingOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTradingOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTradingOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetTransactionDayCompletedEventHandler(object sender, GetTransactionDayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionDayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionDayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetTransactionDayHistCompletedEventHandler(object sender, GetTransactionDayHistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionDayHistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionDayHistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CustomerTransactionDay[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CustomerTransactionDay[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void OrderAgentDeleteCompletedEventHandler(object sender, OrderAgentDeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OrderAgentDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OrderAgentDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void ReportCustomerBuyHoldAmountCompletedEventHandler(object sender, ReportCustomerBuyHoldAmountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportCustomerBuyHoldAmountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportCustomerBuyHoldAmountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void ReportCustomerSellPendingAmountCompletedEventHandler(object sender, ReportCustomerSellPendingAmountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportCustomerSellPendingAmountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportCustomerSellPendingAmountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void TradingResultGetDetailCompletedEventHandler(object sender, TradingResultGetDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TradingResultGetDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TradingResultGetDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591