<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAAAAPAKAADwCgAAAAEAAAAA
        AAAAAAAApaWlAK6ISgB6Yj0AhL/bAGtULQDNoV0AjIyMAE1BMABaY2UAsuH2ALS0tAAuKycAbqO9AN7E
        nQBSUlIA9u/lAHt7ewCceUEAw5dSAJ7V7QDbzrsAfq/HACAgIACZmZkA4ODgAGNMKQCJg3kAra2tANGv
        ewCUdEAAXVA8AGZmZgDH5PEAmpOGALaRVgCAt9IAxZtaANOzgQBbeIYA6trBAFBhaQCVzucArN/1AA8P
        DwB8alAAWlpaAKF/SQBli54A0cWzADk6OwBKSUkAkH9lAKG5xABkWUkAUEMuALDS4QDP7fkAr4lQALal
        igB3XDMAAAAAAIqntABjYV4A////AKyGSQCj2PAAYYSVAFp2gwB9udYAvJNOAMWaVADMoF0AzKdtAO3h
        zQC9vb0AUUxEAIvF4AC+5vgAkrzRAEFBQQCmg0gAg2pCAJB4VADbv5QApdvyAGBROQAzMzMAoM3gALWN
        SwBJVlwAVF1hAAcHBgBlUzUAso5XACgnJwBXSDIAcnJyAMTo+ACjfkMA1/D6ALmTVwDl2MQA5eXlAHy0
        zwC25PcAYH6MAFRrdgCPyOMA8ebWAIWFhQDJomUAmn5SAEI/OwA4NCwAtZRaAIdwUABsVC4AWFZTAHGn
        wgC9lFMAoYNQAGBeWgC2jVIAyev5AGtSOgBKQkIAgbzZAJrQ6AB+utcAYXiCACYlIgBURzEAWlFFAJGA
        ZgBphZMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAPT09PT09PUscGAcHBwcHBwcHBwcHBxgLSz09PT09PT09PT09S0tLHBEuDw8PDw8PDw8PDw8P
        IAcLS0tLPT09PT09PUscARgRMzMyMjIyMn4yMjIyMjIzPwcBARxLPT09PT09HBF6LlBXNwU8PDw8TDw8
        PDw8BTczDy4uERw9PT09PT0BDzKDLAweeAZISEg2SEhISEh4HnEPD3Z2AT09PT09PQEzPBoadTolJSUl
        JTYlJSUlJSU6dRoaA3YBPT09PT09ATMSYx4eJSUlJSUlNiUlJSUlJSUeHlFRdgE9PT09PT0BMxJRHh4l
        JSUlJSU2JSUlJSUlJR4SQUF2AT09PT09PQEzY1ESHiUlJSUlJTYlJSUlJSUlHmMCAnYBPT09PT09ATNR
        AmMeJSUlJSUlhSUlJSUlJSUSUVk6dgE9PT09PT0BM0FZQRIlJSUlJSV+HzolJSUlJRICRll2AT09PT09
        PQEzAkZZUSUlJSV7fV8sCBNHR0dHUVkTe3YBPT09PT09AQ97E0YCR0dHL2ByAAAXXXhHR0cCRhN7dgE9
        PT09PT0BD3tHR1kTRlJdUywAAFwtVgITE1kTE3t2AT09PT09PQEPIyUlE1FdA2UoAQAAGEp5hB4TExMl
        I3YBPT09PT09HHZeSSUlXVJHVEA9LFcZQA4vVkdHR0leLhw9PT09PT1LIDQmbyVSAyVKQG4AAAFAEHRS
        R0dvJoYgSz09PT09PUsHejsOHXNWcG09AAAAF2dnNl5vHQ47YRhLPT09PT09PUsRPyIxZhuCFgRsKoAU
        WD5hFWYxIiAYSz09PT09PT09PUsYYS4zakUEbCoUFFUKCjgJDz9uHEs9PT09PT09PT09PT09C1tof00q
        gEJCK2lOfDU/PT09PT09PT09PT09PT09PT0BKUUETSoUVSsrTmI5ITI9PT09PT09PT09PT09PT09PQFr
        gQRsgEJCK2lOfDk5Vz09PT09PT09PT09PT09PT09AWt/TWyAQisraWJ8OTlXPT09PT09PT09PT09PT09
        PT0BJ3dNKhRVKwpOYjkhFlc9PT09PT09PT09PT09PT09PQFEDSQqFFUraU58OU8NVz09PT09PT09PT09
        PT09PT09AWsNJIAUQkIKCmJkTw1XPT09PT09PT09PT09PT09PT0BWg0NDQ13d3d3d3cNDTI9PT09PT09
        PT09PT09PT09PQt+MA0NDQ0NDQ0NDQ2Hej09PT09PT09PT09PT09PT09SwcyQw0NDQ0NDQ0NJyABPT09
        PT09PT09PT09PT09PT09Sxh6UDIyMjIyMjMRCz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
        PT09PT09PT09Pf4AAH/wAAAP4AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAH4AAAB+AA
        AAfgAAAH4AAAB+ACAAfgAAAH4AQAB/AAAA/4AAAf/wAB//8AAf//AAH//wAB//8AAf//AAH//wAB//8A
        Af//AAH//wAB//+AA///////
</value>
  </data>
</root>