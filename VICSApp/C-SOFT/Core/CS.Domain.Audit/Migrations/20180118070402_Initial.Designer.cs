// <auto-generated />
using CS.Common.Contract.Enums;
using CS.Common.Enums;
using CS.Domain.Audit;
using CS.Domain.Audit.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CS.Domain.Audit.Migrations
{
    [DbContext(typeof(AuditDbContext))]
    [Migration("20180118070402_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CS.Domain.Audit.Entities.CustodyRequestHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BusinessId")
                        .HasMaxLength(125);

                    b.Property<string>("Content");

                    b.Property<string>("ContentClrType");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Notes");

                    b.Property<byte>("Priority");

                    b.Property<byte>("RequestType");

                    b.Property<byte>("Status");

                    b.HasKey("Id");

                    b.ToTable("CustodyRequestHistory");
                });

            modelBuilder.Entity("CS.Domain.Audit.Entities.CustomerAudit", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(65);

                    b.Property<byte>("AuditType");

                    b.Property<DateTime?>("BirthDay");

                    b.Property<Guid?>("BrokerId");

                    b.Property<string>("CardIdentity")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CardIssuedDate");

                    b.Property<string>("CardIssuer")
                        .IsRequired()
                        .HasMaxLength(65);

                    b.Property<byte>("CardType");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2);

                    b.Property<string>("CustomerNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(140);

                    b.Property<string>("FullNameLocal")
                        .IsRequired()
                        .HasMaxLength(140);

                    b.Property<byte>("Genere");

                    b.Property<string>("NationalityCode")
                        .HasMaxLength(2);

                    b.Property<string>("Notes")
                        .HasMaxLength(350);

                    b.Property<string>("PinCode")
                        .HasColumnType("varchar(max)");

                    b.Property<byte[]>("SignatureImage1");

                    b.Property<byte[]>("SignatureImage2");

                    b.Property<byte>("Status");

                    b.Property<string>("TaxCode");

                    b.Property<byte>("Type");

                    b.HasKey("Id");

                    b.ToTable("CustomerAudits");
                });

            modelBuilder.Entity("CS.Domain.Audit.Entities.EventSource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(256);

                    b.Property<string>("Path")
                        .HasMaxLength(512);

                    b.Property<string>("RequestSource")
                        .HasMaxLength(512);

                    b.Property<Guid?>("UserLoginId");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CreatedDate")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("EventSources");
                });

            modelBuilder.Entity("CS.Domain.Audit.Entities.LoginRequest", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Content");

                    b.Property<string>("LoginType")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("LoginRequests");
                });

            modelBuilder.Entity("CS.Domain.Audit.Entities.MessageQueue", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("ClrType");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime?>("PublishedDate");

                    b.Property<byte>("Type");

                    b.HasKey("Id");

                    b.ToTable("MessageQueues");
                });

            modelBuilder.Entity("CS.Domain.Audit.Entities.CustomerAudit", b =>
                {
                    b.HasOne("CS.Domain.Audit.Entities.EventSource", "EventSource")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CS.Domain.Audit.Entities.LoginRequest", b =>
                {
                    b.HasOne("CS.Domain.Audit.Entities.EventSource", "EventSource")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CS.Domain.Audit.Entities.MessageQueue", b =>
                {
                    b.HasOne("CS.Domain.Audit.Entities.EventSource", "EventSource")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
